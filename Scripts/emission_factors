import pandas as pd


def emission_paved_roads(pm: float, silt_loading: float, weight: float) -> float:
    """Calculates the particulate matter emission factor for 4 size classes (PM2.5, PM10, PM15 and PM30) following 
    EPA's "AP-42: 13.2.1 Paved Roads".

    Args:
        pm (float): particulate matter size class to be estimated 
            There are 4 valid options (2.5, 10, 15 and 30)

        silt_loading (float):
            Maximum statistical quality within the range of 0,03 - 400 g/mÂ²

        weight (float): average weight (tons) of the vehicles traveling the road

    Returns:
        float: emission factor for the chosen particulate matter size class
    """

    pm_options = {'2.5': 0.15 ,
                  '10': 0.62,
                  '15': 0.77,
                  '30': 3.23}
    
    k = pm_options[str(pm)]

    emission_factor = k * pow(silt_loading, 0.91) * pow(weight, 1.02)

    return emission_factor

print(emission_paved_roads(2.5, 1, 25))












def emission_unpaved_industrial(pm: float, silt_fraction: float, weight: float) -> float:
    """_summary_

    Args:
        pm (float): particulate matter size class to be estimated 
            There are 3 valid options (2.5, 10 and 30)

        silt_fraction (float): surface material silt content (%)

        weight (float): _description_

    Returns:
        float: _description_
    """

    constants = pd.DataFrame(data = {'k': [0.15, 1.5, 4.9],
                                     'a': [0.9, 0.9, 0.7],
                                     'b': [0.45, 0.45, 0.45]},
                             index = [2.5, 10, 30]
    )

    k = constants.loc[pm, 'k']
    a = constants.loc[pm, 'a']
    b = constants.loc[pm, 'b'] 


    emission_factor = k * pow(silt_fraction / 12, a) * pow(weight / 3, b)

    return emission_factor


print(emission_unpaved_industrial(2.5, 1, 25))








def emission_unpaved_industrial(pm: float, silt_fraction: float, speed: float, moisture: float) -> float:
    """_summary_

    Args:
        pm (float): particulate matter size class to be estimated 
            There are 3 valid options (2.5, 10 and 30)

        silt_fraction (float): surface material silt content (%)

        speed (float): mean vehicle speed (mph)

        moisture (float): surface material moisture content (%)

    Returns:
        float: emission factor for unpaved industrial roads (lb/VMT)
    """

    constants = pd.DataFrame(data = {'k': [0.18, 1.8, 6.0],
                                     'a': [1.0, 1.0, 1.0],
                                     'c': [0.2, 0.2, 0.3],
                                     'd': [0.5, 0.5, 0.3],
                                     'wear_emission': [0.00036, 0.00047, 0.00047]},
                             index = [2.5, 10, 30]
    )

    k = constants.loc[pm, 'k']
    a = constants.loc[pm, 'a']
    c = constants.loc[pm, 'c'] 
    d = constants.loc[pm, 'd']
    wear_emission = constants.loc[pm, 'wear_emission']
    

    emission_factor = k * (((silt_fraction, a) * pow(speed, d)) / pow(moisture, c)) - wear_emission

    return emission_factor

